# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: "Java CI with Maven and Docker"

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ "main" ]

jobs:
  ci-build:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

#  https://github.com/marketplace/actions/git-semantic-version

    - name: Git Semantic Version
      uses: PaulHatch/semantic-version@v5.0.3
      id: tag_version_develop
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
        major_regexp_flags: ""
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
        minor_regexp_flags: ""
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}-prerelease${increment}"
        # Named version, will be used as suffix for name version tag
        namespace: qrservice
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: true
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: false
        # The output method used to generate list of users, 'csv' or 'json'.
        user_format_type: "csv"

    - name: output
      run: |
        echo "${{ steps.tag_version_develop.outputs.version_tag }}"
        echo "Outputs: ${{ steps.tag_version_develop.outputs.version }}"

    - name: Build with Maven
      id: maven_build
      run: mvn -Drevision="${{ steps.tag_version_develop.outputs.version }}" -B --no-transfer-progress package --file pom.xml

    - name: Show build output
      run: |
        echo "github.workspace: ${{ github.workspace }}"
        echo "current directory: $(pwd)"
        echo "------------ Contents of target: ---------------"
        ls -R target

    - name: Upload JAR file
      uses: actions/upload-artifact@v4
      with:
        name: my-app-jar
        path: ${{ github.workspace }}/target/*.jar
        compression-level: '0'  # no compression - Jar is zipped anyway

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ${{ github.workspace }}
        push: true
        tags: ghcr.io/${{ github.repository }}/my-app:latest
        build-args: |
          TARGET_DIR=./target